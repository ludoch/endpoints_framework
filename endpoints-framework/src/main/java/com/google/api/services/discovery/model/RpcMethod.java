/*
 * Copyright 2010 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2015-11-16 19:10:01 UTC)
 * on 2015-11-19 at 17:34:48 UTC 
 * Modify at your own risk.
 */

package com.google.api.services.discovery.model;

/**
 * Model definition for RpcMethod.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the APIs Discovery Service. For a detailed explanation
 * see:
 * <a href="http://code.google.com/p/google-http-java-client/wiki/JSON">http://code.google.com/p/google-http-java-client/wiki/JSON</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RpcMethod extends com.google.api.client.json.GenericJson {

  /**
   * Whether the method can be made using an HTTP GET JSON-RPC request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowGet;

  /**
   * Description of this method.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Does this method require sending the ETag along with the request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean etagRequired;

  /**
   * A unique ID for this method. This property can be used to match methods between different
   * versions of Discovery.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String id;

  /**
   * Media upload parameters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MediaUpload mediaUpload;

  /**
   * Ordered list of required parameters, serves as a hint to clients on how to structure their
   * method signatures. The array is ordered such that the "most-significant" parameter appears
   * first.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> parameterOrder;

  /**
   * Description for all parameters in this method.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, JsonSchema> parameters;

  static {
    // hack to force ProGuard to consider JsonSchema used, since otherwise it would be stripped out
    // see http://code.google.com/p/google-api-java-client/issues/detail?id=528
    com.google.api.client.util.Data.nullOf(JsonSchema.class);
  }

  /**
   * The schema for the response.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Returns returns;

  /**
   * OAuth 2.0 scopes applicable to this method.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> scopes;

  /**
   * Whether this method supports media download.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean supportsMediaDownload;

  /**
   * Whether this method supports media upload.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean supportsMediaUpload;

  /**
   * Whether this method supports patch semantics.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean supportsPatch;

  /**
   * Whether this method supports subscriptions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean supportsSubscription;

  /**
   * Indicates that downloads from this method should use the download service URL (i.e.
   * "/download"). Only applies if the method supports media download.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean useMediaDownloadService;

  /**
   * Whether the method can be made using an HTTP GET JSON-RPC request.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowGet() {
    return allowGet;
  }

  /**
   * Whether the method can be made using an HTTP GET JSON-RPC request.
   * @param allowGet allowGet or {@code null} for none
   */
  public RpcMethod setAllowGet(java.lang.Boolean allowGet) {
    this.allowGet = allowGet;
    return this;
  }

  /**
   * Description of this method.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Description of this method.
   * @param description description or {@code null} for none
   */
  public RpcMethod setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Does this method require sending the ETag along with the request.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEtagRequired() {
    return etagRequired;
  }

  /**
   * Does this method require sending the ETag along with the request.
   * @param etagRequired etagRequired or {@code null} for none
   */
  public RpcMethod setEtagRequired(java.lang.Boolean etagRequired) {
    this.etagRequired = etagRequired;
    return this;
  }

  /**
   * A unique ID for this method. This property can be used to match methods between different
   * versions of Discovery.
   * @return value or {@code null} for none
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * A unique ID for this method. This property can be used to match methods between different
   * versions of Discovery.
   * @param id id or {@code null} for none
   */
  public RpcMethod setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  /**
   * Media upload parameters.
   * @return value or {@code null} for none
   */
  public MediaUpload getMediaUpload() {
    return mediaUpload;
  }

  /**
   * Media upload parameters.
   * @param mediaUpload mediaUpload or {@code null} for none
   */
  public RpcMethod setMediaUpload(MediaUpload mediaUpload) {
    this.mediaUpload = mediaUpload;
    return this;
  }

  /**
   * Ordered list of required parameters, serves as a hint to clients on how to structure their
   * method signatures. The array is ordered such that the "most-significant" parameter appears
   * first.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getParameterOrder() {
    return parameterOrder;
  }

  /**
   * Ordered list of required parameters, serves as a hint to clients on how to structure their
   * method signatures. The array is ordered such that the "most-significant" parameter appears
   * first.
   * @param parameterOrder parameterOrder or {@code null} for none
   */
  public RpcMethod setParameterOrder(java.util.List<java.lang.String> parameterOrder) {
    this.parameterOrder = parameterOrder;
    return this;
  }

  /**
   * Description for all parameters in this method.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, JsonSchema> getParameters() {
    return parameters;
  }

  /**
   * Description for all parameters in this method.
   * @param parameters parameters or {@code null} for none
   */
  public RpcMethod setParameters(java.util.Map<String, JsonSchema> parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * The schema for the response.
   * @return value or {@code null} for none
   */
  public Returns getReturns() {
    return returns;
  }

  /**
   * The schema for the response.
   * @param returns returns or {@code null} for none
   */
  public RpcMethod setReturns(Returns returns) {
    this.returns = returns;
    return this;
  }

  /**
   * OAuth 2.0 scopes applicable to this method.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getScopes() {
    return scopes;
  }

  /**
   * OAuth 2.0 scopes applicable to this method.
   * @param scopes scopes or {@code null} for none
   */
  public RpcMethod setScopes(java.util.List<java.lang.String> scopes) {
    this.scopes = scopes;
    return this;
  }

  /**
   * Whether this method supports media download.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSupportsMediaDownload() {
    return supportsMediaDownload;
  }

  /**
   * Whether this method supports media download.
   * @param supportsMediaDownload supportsMediaDownload or {@code null} for none
   */
  public RpcMethod setSupportsMediaDownload(java.lang.Boolean supportsMediaDownload) {
    this.supportsMediaDownload = supportsMediaDownload;
    return this;
  }

  /**
   * Whether this method supports media upload.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSupportsMediaUpload() {
    return supportsMediaUpload;
  }

  /**
   * Whether this method supports media upload.
   * @param supportsMediaUpload supportsMediaUpload or {@code null} for none
   */
  public RpcMethod setSupportsMediaUpload(java.lang.Boolean supportsMediaUpload) {
    this.supportsMediaUpload = supportsMediaUpload;
    return this;
  }

  /**
   * Whether this method supports patch semantics.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSupportsPatch() {
    return supportsPatch;
  }

  /**
   * Whether this method supports patch semantics.
   * @param supportsPatch supportsPatch or {@code null} for none
   */
  public RpcMethod setSupportsPatch(java.lang.Boolean supportsPatch) {
    this.supportsPatch = supportsPatch;
    return this;
  }

  /**
   * Whether this method supports subscriptions.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSupportsSubscription() {
    return supportsSubscription;
  }

  /**
   * Whether this method supports subscriptions.
   * @param supportsSubscription supportsSubscription or {@code null} for none
   */
  public RpcMethod setSupportsSubscription(java.lang.Boolean supportsSubscription) {
    this.supportsSubscription = supportsSubscription;
    return this;
  }

  /**
   * Indicates that downloads from this method should use the download service URL (i.e.
   * "/download"). Only applies if the method supports media download.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUseMediaDownloadService() {
    return useMediaDownloadService;
  }

  /**
   * Indicates that downloads from this method should use the download service URL (i.e.
   * "/download"). Only applies if the method supports media download.
   * @param useMediaDownloadService useMediaDownloadService or {@code null} for none
   */
  public RpcMethod setUseMediaDownloadService(java.lang.Boolean useMediaDownloadService) {
    this.useMediaDownloadService = useMediaDownloadService;
    return this;
  }

  @Override
  public RpcMethod set(String fieldName, Object value) {
    return (RpcMethod) super.set(fieldName, value);
  }

  @Override
  public RpcMethod clone() {
    return (RpcMethod) super.clone();
  }

  /**
   * Media upload parameters.
   */
  public static final class MediaUpload extends com.google.api.client.json.GenericJson {

    /**
     * MIME Media Ranges for acceptable media uploads to this method.
     * The value may be {@code null}.
     */
    @com.google.api.client.util.Key
    private java.util.List<java.lang.String> accept;

    /**
     * Maximum size of a media upload, such as "1MB", "2GB" or "3TB".
     * The value may be {@code null}.
     */
    @com.google.api.client.util.Key
    private java.lang.String maxSize;

    /**
     * MIME Media Ranges for acceptable media uploads to this method.
     * @return value or {@code null} for none
     */
    public java.util.List<java.lang.String> getAccept() {
      return accept;
    }

    /**
     * MIME Media Ranges for acceptable media uploads to this method.
     * @param accept accept or {@code null} for none
     */
    public MediaUpload setAccept(java.util.List<java.lang.String> accept) {
      this.accept = accept;
      return this;
    }

    /**
     * Maximum size of a media upload, such as "1MB", "2GB" or "3TB".
     * @return value or {@code null} for none
     */
    public java.lang.String getMaxSize() {
      return maxSize;
    }

    /**
     * Maximum size of a media upload, such as "1MB", "2GB" or "3TB".
     * @param maxSize maxSize or {@code null} for none
     */
    public MediaUpload setMaxSize(java.lang.String maxSize) {
      this.maxSize = maxSize;
      return this;
    }

    @Override
    public MediaUpload set(String fieldName, Object value) {
      return (MediaUpload) super.set(fieldName, value);
    }

    @Override
    public MediaUpload clone() {
      return (MediaUpload) super.clone();
    }

  }

  /**
   * The schema for the response.
   */
  public static final class Returns extends com.google.api.client.json.GenericJson {

    /**
     * Schema ID for the response schema.
     * The value may be {@code null}.
     */
    @com.google.api.client.util.Key
    private java.lang.String $ref;

    /**
     * Schema ID for the response schema.
     * @return value or {@code null} for none
     */
    public java.lang.String get$ref() {
      return $ref;
    }

    /**
     * Schema ID for the response schema.
     * @param $ref $ref or {@code null} for none
     */
    public Returns set$ref(java.lang.String $ref) {
      this.$ref = $ref;
      return this;
    }

    @Override
    public Returns set(String fieldName, Object value) {
      return (Returns) super.set(fieldName, value);
    }

    @Override
    public Returns clone() {
      return (Returns) super.clone();
    }

  }

}
